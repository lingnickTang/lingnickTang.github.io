{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u535a\u5ba2 \u00b6 \u8be6\u60c5\u8bf7\u8bbf\u95ee github\u7f51\u7ad9 Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u9996\u9875"},{"location":"#_1","text":"\u8be6\u60c5\u8bf7\u8bbf\u95ee github\u7f51\u7ad9","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u535a\u5ba2"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"Warning Attention Caution Danger Error Hint Important Tip Note \u6458\u8981\uff0c\u603b\u7ed3 \u200b abstract, summary, tldr \u8d34\u58eb \u200b tip, hint, important \u6ce8\u91ca\uff0c\u4ee3\u7801\u7247\u6bb5\uff0c\u8bf4\u660e \u200b note, snippet, seealso \u4e3e\u4f8b\uff0c\u5217\u8868 \u200b example \u5f15\u7528\uff0c\u53c2\u8003\u94fe\u63a5 \u200b quote, cite \u63d0\u793a\uff0cTODO \u200b info, todo \u8b66\u544a \u200b warning, caution, attention \u5371\u9669 \u200b danger, error \u6210\u529f\uff0c\u52fe\u9009\uff0c\u5b8c\u6210 \u200b success, check, done \u5931\u8d25 \u200b failure, fail, missing \u95ee\u9898\uff0c\u7591\u95ee\uff0c\u5e2e\u52a9 \u200b question, help, faq BUG \u200b bug \u4f8b\u5b50\uff1a \u00b6 custom title or blank text \u53ef\u6298\u53e0+\u9ed8\u8ba4\u6253\u5f00\uff1a \u00b6 custom title or blank text vtext text, text, v text vtext text, text, v text1 = \"Hello, \" text2 = \"world!\" print text1 + text2","title":"\u5173\u4e8e"},{"location":"about/#_1","text":"custom title or blank text","title":"\u4f8b\u5b50\uff1a"},{"location":"about/#_2","text":"custom title or blank text vtext text, text, v text vtext text, text, v text1 = \"Hello, \" text2 = \"world!\" print text1 + text2","title":"\u53ef\u6298\u53e0+\u9ed8\u8ba4\u6253\u5f00\uff1a"},{"location":"course/missing_semester/1.Course%20overview%2Bthe%20shell/","text":"Missing Semester \u00b6 from missing.csail.mit.edu 20 Jan 2021 Course overview + the shell Exercises \u00b6 1.For this course, you need to be using a Unix shell like Bash or ZSH. If you are on Linux or macOS, you don\u2019t have to do anything special. If you are on Windows, you need to make sure you are not running cmd.exe or PowerShell; you can use Windows Subsystem for Linux or a Linux virtual machine to use Unix-style command-line tools. To make sure you\u2019re running an appropriate shell, you can try the command echo $SHELL . If it says something like /bin/bash or /usr/bin/zsh , that means you\u2019re running the right program. $ echo $SHELL /bin/bash 2.Create a new directory called missing under /tmp . mkdir /tmp/missing 3.Look up the touch program. The man program is your friend. man touch 4.Use touch to create a new file called semester in missing . touch /tmp/missing/semester 5.Write the following into that file, one line at a time: #!/bin/sh curl --head --silent https://missing.csail.mit.edu The first line might be tricky to get working. It\u2019s helpful to know that # starts a comment in Bash, and ! has a special meaning even within double-quoted ( \" ) strings. Bash treats single-quoted strings ( ' ) differently: they will do the trick in this case. See the Bash quoting manual page for more information. echo '#!/bin/sh' >> semester || echo \"\\#\\!/bin/sh\" >> semester echo 'curl --head --silent https://missing.csail.mit.edu' >> semester 6.Try to execute the file, i.e. type the path to the script ( ./semester ) into your shell and press enter. Understand why it doesn\u2019t work by consulting the output of ls (hint: look at the permission bits of the file). ls -l #no execution bit for any group, meaning the file itself is not exexcutable sudo ./semester #command not found, proving the idea above. 7.Run the command by explicitly starting the sh interpreter, and giving it the file semester as the first argument, i.e. sh semester . Why does this work, while ./semester didn\u2019t? #sh is executable, so only requires ./semester to be readable, which can obviously work. 8.Look up the chmod program (e.g. use man chmod ). 9.Use chmod to make it possible to run the command ./semester rather than having to type sh semester . How does your shell know that the file is supposed to be interpreted using sh ? See this page on the shebang line for more information. chmod +x semester || chmod 777 semester #use ls -l to check the differences 10.Use | and > to write the \u201clast modified\u201d date output by semester into a file called last-modified.txt in your home directory. ls -l semester | tail -c 22 > ~/last-modified.txt #split the string stat -c '%x' semester > ~/last-modified.txt 11.Write a command that reads out your laptop battery\u2019s power level or your desktop machine\u2019s CPU temperature from /sys . Note: if you\u2019re a macOS user, your OS doesn\u2019t have sysfs, so you can skip this exercise. cat /sys/class/power_supply/BAT0/capacity || #skip","title":"Missing Semester"},{"location":"course/missing_semester/1.Course%20overview%2Bthe%20shell/#missing-semester","text":"from missing.csail.mit.edu 20 Jan 2021","title":"Missing Semester"},{"location":"course/missing_semester/1.Course%20overview%2Bthe%20shell/#course-overview-the-shell-exercises","text":"1.For this course, you need to be using a Unix shell like Bash or ZSH. If you are on Linux or macOS, you don\u2019t have to do anything special. If you are on Windows, you need to make sure you are not running cmd.exe or PowerShell; you can use Windows Subsystem for Linux or a Linux virtual machine to use Unix-style command-line tools. To make sure you\u2019re running an appropriate shell, you can try the command echo $SHELL . If it says something like /bin/bash or /usr/bin/zsh , that means you\u2019re running the right program. $ echo $SHELL /bin/bash 2.Create a new directory called missing under /tmp . mkdir /tmp/missing 3.Look up the touch program. The man program is your friend. man touch 4.Use touch to create a new file called semester in missing . touch /tmp/missing/semester 5.Write the following into that file, one line at a time: #!/bin/sh curl --head --silent https://missing.csail.mit.edu The first line might be tricky to get working. It\u2019s helpful to know that # starts a comment in Bash, and ! has a special meaning even within double-quoted ( \" ) strings. Bash treats single-quoted strings ( ' ) differently: they will do the trick in this case. See the Bash quoting manual page for more information. echo '#!/bin/sh' >> semester || echo \"\\#\\!/bin/sh\" >> semester echo 'curl --head --silent https://missing.csail.mit.edu' >> semester 6.Try to execute the file, i.e. type the path to the script ( ./semester ) into your shell and press enter. Understand why it doesn\u2019t work by consulting the output of ls (hint: look at the permission bits of the file). ls -l #no execution bit for any group, meaning the file itself is not exexcutable sudo ./semester #command not found, proving the idea above. 7.Run the command by explicitly starting the sh interpreter, and giving it the file semester as the first argument, i.e. sh semester . Why does this work, while ./semester didn\u2019t? #sh is executable, so only requires ./semester to be readable, which can obviously work. 8.Look up the chmod program (e.g. use man chmod ). 9.Use chmod to make it possible to run the command ./semester rather than having to type sh semester . How does your shell know that the file is supposed to be interpreted using sh ? See this page on the shebang line for more information. chmod +x semester || chmod 777 semester #use ls -l to check the differences 10.Use | and > to write the \u201clast modified\u201d date output by semester into a file called last-modified.txt in your home directory. ls -l semester | tail -c 22 > ~/last-modified.txt #split the string stat -c '%x' semester > ~/last-modified.txt 11.Write a command that reads out your laptop battery\u2019s power level or your desktop machine\u2019s CPU temperature from /sys . Note: if you\u2019re a macOS user, your OS doesn\u2019t have sysfs, so you can skip this exercise. cat /sys/class/power_supply/BAT0/capacity || #skip","title":"Course overview + the shell Exercises"},{"location":"course/missing_semester/2.Shell%20Tools%20and%20Scripting/","text":"Shell Tools and Scripting \u00b6 24 Jan 2021 1.Read man ls and write an ls command that lists files in the following manner Includes all files, including hidden files Sizes are listed in human readable format (e.g. 454M instead of 454279954) Files are ordered by recency Output is colorized A sample output would look like this -rw-r--r-- 1 user group 1 .1M Jan 14 09 :53 baz drwxr-xr-x 5 user group 160 Jan 14 09 :53 . -rw-r--r-- 1 user group 514 Jan 14 06 :42 bar -rw-r--r-- 1 user group 106M Jan 13 12 :12 foo drwx------+ 47 user group 1 .5K Jan 12 18 :08 .. bash ls -ahclt #coloried by default 2.Write bash functions marco and polo that do the following. Whenever you execute marco the current working directory should be saved in some manner, then when you execute polo , no matter what directory you are in, polo should cd you back to the directory where you executed marco . For ease of debugging you can write the code in a file marco.sh and (re)load the definitions to your shell by executing source marco.sh . #!/usr/bin/env bash loc = ~/Desktop/missing/location marco (){ pwd > $loc } polo (){ cd $( cat $loc ) } 3.Say you have a command that fails rarely. In order to debug it you need to capture its output but it can be time consuming to get a failure run. Write a bash script that runs the following script until it fails and captures its standard output and error streams to files and prints everything at the end. Bonus points if you can also report how many runs it took for the script to fail. #!/usr/bin/env bash n = $(( RANDOM % 100 )) if [[ n -eq 42 ]] ; then echo \"Something went wrong\" > & 2 echo \"The error was using magic numbers\" exit 1 fi echo \"Everything went according to plan\" #!/usr/bin/env bash runtimes = 0 touch ex2output3 while [ true ] ; do (( ++runtimes )) bash ex2pro3.sh >> ex2output3 if [[ $? -ne 0 ]] ; then #once fail, $? will not be 0 break fi done echo \"After $runtimes runs an error occured\" >> ex2output3 4.As we covered in the lecture find \u2019s -exec can be very powerful for performing operations over the files we are searching for. However, what if we want to do something with all the files, like creating a zip file? As you have seen so far commands will take input from both arguments and STDIN. When piping commands, we are connecting STDOUT to STDIN, but some commands like tar take inputs from arguments. To bridge this disconnect there\u2019s the xargs command which will execute a command using STDIN as arguments. For example ls | xargs rm will delete the files in the current directory. Your task is to write a command that recursively finds all HTML files in the folder and makes a zip with them. Note that your command should work even if the files have spaces (hint: check -d flag for xargs ). If you\u2019re on macOS, note that the default BSD find is different from the one included in GNU coreutils . You can use -print0 on find and the -0 flag on xargs . As a macOS user, you should be aware that command-line utilities shipped with macOS may differ from the GNU counterparts; you can install the GNU versions if you like by using brew . find . -name '*html' | xargs -d '\\n' tar czf htmls.tar 5.(Advanced) Write a command or script to recursively find the most recently modified file in a directory. More generally, can you list all files by recency? #referred from http://zacheller.dev/missing-semester1 # Most recently modified file ## find files of type file, printing seconds-since-epoch and filename\\n with no delim ## sort that numerically (low-to-high), grab the last line, and cut just filename find . -type f -printf '%T@%p\\n' | sort -n | tail -n 1 | cut -c 22 - # List all files by recency ## find files, print 'TimeFilename\\n', sort high-to-low, remove time info find . -type f -printf '%T@%p\\n' | sort -rn | cut -c 22 -","title":"2.Shell Tools and Scripting"},{"location":"course/missing_semester/2.Shell%20Tools%20and%20Scripting/#shell-tools-and-scripting","text":"24 Jan 2021 1.Read man ls and write an ls command that lists files in the following manner Includes all files, including hidden files Sizes are listed in human readable format (e.g. 454M instead of 454279954) Files are ordered by recency Output is colorized A sample output would look like this -rw-r--r-- 1 user group 1 .1M Jan 14 09 :53 baz drwxr-xr-x 5 user group 160 Jan 14 09 :53 . -rw-r--r-- 1 user group 514 Jan 14 06 :42 bar -rw-r--r-- 1 user group 106M Jan 13 12 :12 foo drwx------+ 47 user group 1 .5K Jan 12 18 :08 .. bash ls -ahclt #coloried by default 2.Write bash functions marco and polo that do the following. Whenever you execute marco the current working directory should be saved in some manner, then when you execute polo , no matter what directory you are in, polo should cd you back to the directory where you executed marco . For ease of debugging you can write the code in a file marco.sh and (re)load the definitions to your shell by executing source marco.sh . #!/usr/bin/env bash loc = ~/Desktop/missing/location marco (){ pwd > $loc } polo (){ cd $( cat $loc ) } 3.Say you have a command that fails rarely. In order to debug it you need to capture its output but it can be time consuming to get a failure run. Write a bash script that runs the following script until it fails and captures its standard output and error streams to files and prints everything at the end. Bonus points if you can also report how many runs it took for the script to fail. #!/usr/bin/env bash n = $(( RANDOM % 100 )) if [[ n -eq 42 ]] ; then echo \"Something went wrong\" > & 2 echo \"The error was using magic numbers\" exit 1 fi echo \"Everything went according to plan\" #!/usr/bin/env bash runtimes = 0 touch ex2output3 while [ true ] ; do (( ++runtimes )) bash ex2pro3.sh >> ex2output3 if [[ $? -ne 0 ]] ; then #once fail, $? will not be 0 break fi done echo \"After $runtimes runs an error occured\" >> ex2output3 4.As we covered in the lecture find \u2019s -exec can be very powerful for performing operations over the files we are searching for. However, what if we want to do something with all the files, like creating a zip file? As you have seen so far commands will take input from both arguments and STDIN. When piping commands, we are connecting STDOUT to STDIN, but some commands like tar take inputs from arguments. To bridge this disconnect there\u2019s the xargs command which will execute a command using STDIN as arguments. For example ls | xargs rm will delete the files in the current directory. Your task is to write a command that recursively finds all HTML files in the folder and makes a zip with them. Note that your command should work even if the files have spaces (hint: check -d flag for xargs ). If you\u2019re on macOS, note that the default BSD find is different from the one included in GNU coreutils . You can use -print0 on find and the -0 flag on xargs . As a macOS user, you should be aware that command-line utilities shipped with macOS may differ from the GNU counterparts; you can install the GNU versions if you like by using brew . find . -name '*html' | xargs -d '\\n' tar czf htmls.tar 5.(Advanced) Write a command or script to recursively find the most recently modified file in a directory. More generally, can you list all files by recency? #referred from http://zacheller.dev/missing-semester1 # Most recently modified file ## find files of type file, printing seconds-since-epoch and filename\\n with no delim ## sort that numerically (low-to-high), grab the last line, and cut just filename find . -type f -printf '%T@%p\\n' | sort -n | tail -n 1 | cut -c 22 - # List all files by recency ## find files, print 'TimeFilename\\n', sort high-to-low, remove time info find . -type f -printf '%T@%p\\n' | sort -rn | cut -c 22 -","title":"Shell Tools and Scripting"},{"location":"course/missing_semester/3.Editors%20%28Vim%29/","text":"Editors (Vim) \u00b6 28 Jan 2021 Preparation \u00b6 configure zsh and keys illustration(by tools download) install Vim emulation for other applications remap Caps Lock to Escape configure space-vim (my choice, not an advertisement) Exercises \u00b6 1.Complete vimtutor . Note: it looks best in a 80x24 (80 columns by 24 lines) terminal window. 2.Download our basic vimrc and save it to ~/.vimrc . Read through the well-commented file (using Vim!), and observe how Vim looks and behaves slightly differently with the new config. #you can try other configs throughout the Internet 3.Install and configure a plugin: ctrlp.vim. 1. Create the plugins directory with mkdir -p ~/.vim/pack/vendor/start 2. Download the plugin: cd ~/.vim/pack/vendor/start; git clone https://github.com/ctrlpvim/ctrlp.vim 3. Read the documentation for the plugin. Try using CtrlP to locate a file by navigating to a project directory, opening Vim, and using the Vim command-line to start :CtrlP . 4. Customize CtrlP by adding configuration to your ~/.vimrc to open CtrlP by pressing Ctrl-P. 4.To practice using Vim, re-do the Demo from lecture on your own machine. 5.Use Vim for all your text editing for the next month. Whenever something seems inefficient, or when you think \u201cthere must be a better way\u201d, try Googling it, there probably is. If you get stuck, come to office hours or send us an email. 6.Configure your other tools to use Vim bindings (see instructions above). 7.Further customize your ~/.vimrc and install more plugin. 8.(Advanced) Convert XML to JSON ( example file ) using Vim macros. Try to do this on your own, but you can look at the macros section above if you get stuck. wget \"https://missing.csail.mit.edu/2020/files/example-data.xml\"","title":"3.Editors (Vim)"},{"location":"course/missing_semester/3.Editors%20%28Vim%29/#editors-vim","text":"28 Jan 2021","title":"Editors (Vim)"},{"location":"course/missing_semester/3.Editors%20%28Vim%29/#preparation","text":"configure zsh and keys illustration(by tools download) install Vim emulation for other applications remap Caps Lock to Escape configure space-vim (my choice, not an advertisement)","title":"Preparation"},{"location":"course/missing_semester/3.Editors%20%28Vim%29/#exercises","text":"1.Complete vimtutor . Note: it looks best in a 80x24 (80 columns by 24 lines) terminal window. 2.Download our basic vimrc and save it to ~/.vimrc . Read through the well-commented file (using Vim!), and observe how Vim looks and behaves slightly differently with the new config. #you can try other configs throughout the Internet 3.Install and configure a plugin: ctrlp.vim. 1. Create the plugins directory with mkdir -p ~/.vim/pack/vendor/start 2. Download the plugin: cd ~/.vim/pack/vendor/start; git clone https://github.com/ctrlpvim/ctrlp.vim 3. Read the documentation for the plugin. Try using CtrlP to locate a file by navigating to a project directory, opening Vim, and using the Vim command-line to start :CtrlP . 4. Customize CtrlP by adding configuration to your ~/.vimrc to open CtrlP by pressing Ctrl-P. 4.To practice using Vim, re-do the Demo from lecture on your own machine. 5.Use Vim for all your text editing for the next month. Whenever something seems inefficient, or when you think \u201cthere must be a better way\u201d, try Googling it, there probably is. If you get stuck, come to office hours or send us an email. 6.Configure your other tools to use Vim bindings (see instructions above). 7.Further customize your ~/.vimrc and install more plugin. 8.(Advanced) Convert XML to JSON ( example file ) using Vim macros. Try to do this on your own, but you can look at the macros section above if you get stuck. wget \"https://missing.csail.mit.edu/2020/files/example-data.xml\"","title":"Exercises"},{"location":"course/missing_semester/4.Data%20Wrangling/","text":"Data Wrangling \u00b6 9 Feb 2021 Exercises \u00b6 1.Take this short interactive regex tutorial 2.Find the number of words (in /usr/share/dict/words ) that contain at least three a s and don\u2019t have a 's ending. What are the three most common last two letters of those words? sed \u2019s y command, or the tr program, may help you with case insensitivity. How many of those two-letter combinations are there? And for a challenge: which combinations do not occur? cat words | grep \"^.*a.*a.*a.*[^'s] $ \" \\ | sed -E \"s/.*(.{2})/\\1/\" \\ | sort | uniq -c | sort -nk1,1 \\ | wc -l cat words | grep \"^.*a.*a.*a.*[^'s] $ \" \\ | sed -E \"s/.*(.{2})/\\1/\" \\ | sort | uniq -c | sort -nk2,2 \\ #sorted by two-letter 3.To do in-place substitution it is quite tempting to do something like sed s/REGEX/SUBSTITUTION/ input.txt > input.txt . However this is a bad idea, why? Is this particular to sed ? Use man sed to find out how to accomplish this. #the whole file will be emptied #use -i(--in-place) 4.Find your average, median, and max system boot time over the last ten boots. Use journalctl #I've never shut up my Linux on virtual machine... on Linux and log show on macOS, and look for log timestamps near the beginning and end of each boot. On Linux, they may look something like: Logs begin at ... and systemd[577]: Startup finished in ... On macOS, look for : === system boot: and Previous shutdown cause: 5 5.Look for boot messages that are not shared between your past three reboots (see journalctl \u2019s -b flag). Break this task down into multiple steps. First, find a way to get just the logs from the past three boots. There may be an applicable flag on the tool you use to extract the boot logs, or you can use sed '0,/STRING/d' to remove all lines previous to one that matches STRING . Next, remove any parts of the line that always varies (like the timestamp). Then, de-duplicate the input lines and keep a count of each one ( uniq is your friend). And finally, eliminate any line whose count is 3 (since it was shared among all the boots). #follow the instruction 6.Find an online data set like this one , this one , or maybe one from here . Fetch it using curl and extract out just two columns of numerical data. If you\u2019re fetching HTML data, pup might be helpful. For JSON data, try jq . Find the min and max of one column in a single command, and the difference of the sum of each column in another. #try awk(column based and programmable)","title":"4.Data Wrangling"},{"location":"course/missing_semester/4.Data%20Wrangling/#data-wrangling","text":"9 Feb 2021","title":"Data Wrangling"},{"location":"course/missing_semester/4.Data%20Wrangling/#exercises","text":"1.Take this short interactive regex tutorial 2.Find the number of words (in /usr/share/dict/words ) that contain at least three a s and don\u2019t have a 's ending. What are the three most common last two letters of those words? sed \u2019s y command, or the tr program, may help you with case insensitivity. How many of those two-letter combinations are there? And for a challenge: which combinations do not occur? cat words | grep \"^.*a.*a.*a.*[^'s] $ \" \\ | sed -E \"s/.*(.{2})/\\1/\" \\ | sort | uniq -c | sort -nk1,1 \\ | wc -l cat words | grep \"^.*a.*a.*a.*[^'s] $ \" \\ | sed -E \"s/.*(.{2})/\\1/\" \\ | sort | uniq -c | sort -nk2,2 \\ #sorted by two-letter 3.To do in-place substitution it is quite tempting to do something like sed s/REGEX/SUBSTITUTION/ input.txt > input.txt . However this is a bad idea, why? Is this particular to sed ? Use man sed to find out how to accomplish this. #the whole file will be emptied #use -i(--in-place) 4.Find your average, median, and max system boot time over the last ten boots. Use journalctl #I've never shut up my Linux on virtual machine... on Linux and log show on macOS, and look for log timestamps near the beginning and end of each boot. On Linux, they may look something like: Logs begin at ... and systemd[577]: Startup finished in ... On macOS, look for : === system boot: and Previous shutdown cause: 5 5.Look for boot messages that are not shared between your past three reboots (see journalctl \u2019s -b flag). Break this task down into multiple steps. First, find a way to get just the logs from the past three boots. There may be an applicable flag on the tool you use to extract the boot logs, or you can use sed '0,/STRING/d' to remove all lines previous to one that matches STRING . Next, remove any parts of the line that always varies (like the timestamp). Then, de-duplicate the input lines and keep a count of each one ( uniq is your friend). And finally, eliminate any line whose count is 3 (since it was shared among all the boots). #follow the instruction 6.Find an online data set like this one , this one , or maybe one from here . Fetch it using curl and extract out just two columns of numerical data. If you\u2019re fetching HTML data, pup might be helpful. For JSON data, try jq . Find the min and max of one column in a single command, and the difference of the sum of each column in another. #try awk(column based and programmable)","title":"Exercises"},{"location":"course/missing_semester/5.Command-line%20Environment/","text":"Command-line Environment \u00b6 25 Feb 2021 Exercises \u00b6 Job control \u00b6 1.From what we have seen, we can use some ps aux | grep commands to get our jobs\u2019 pids and then kill them, but there are better ways to do it. Start a sleep 10000 job in a terminal, background it with Ctrl-Z and continue its execution with bg . Now use pgrep to find its pid and pkill to kill it without ever typing the pid itself. (Hint: use the -af flags). pgrep -a sleep pkill -f 10000 ( # or pkill -f sleep) 2.Say you don\u2019t want to start a process until another completes, how you would go about it? In this exercise our limiting process will always be sleep 60 & . One way to achieve this is to use the wait command. Try launching the sleep command and having an ls wait until the background process finishes. #!/bin/bash sleep 10 & PID = $! wait $PID ls However, this strategy will fail if we start in a different bash session, since wait only works for child processes. One feature we did not discuss in the notes is that the kill command\u2019s exit status will be zero on success and nonzero otherwise. kill -0 does not send a signal but will give a nonzero exit status if the process does not exist. Write a bash function called pidwait that takes a pid and waits until the given process completes. You should use sleep to avoid wasting CPU unnecessarily. #!/bin/bash sleep 10 & while true do kill -0 $PID if [ $? -ne 0 ] ; then echo \"breaking!\" break fi sleep 1 done ls Terminal multiplexer \u00b6 1.Follow this tmux tutorial and then learn how to do some basic customizations following these steps . #amazing Aliases \u00b6 1.Create an alias dc that resolves to cd for when you type it wrongly. alias dc = cd 2.Run history | awk '{$1=\"\";print substr($0,2)}' | sort | uniq -c | sort -n | tail -n 10 to get your top 10 most used commands and consider writing shorter aliases for them. Note: this works for Bash; if you\u2019re using ZSH, use history 1 instead of just history . # the top 10 of my used commands 5 ps 7 cd Desktop 10 vi ~/.spacevim 11 cd ~ 11 sh ./pidwait 12 vi input.txt 16 vi pidwait 17 vi .vimrc 25 vi ~/.vimrc -> v 47 ls Dotfiles \u00b6 Let\u2019s get you up to speed with dotfiles. 1.Create a folder for your dotfiles and set up version control. 2.Add a configuration for at least one program, e.g. your shell, with some customization (to start off, it can be something as simple as customizing your shell prompt by setting $PS1 ). 3.Set up a method to install your dotfiles quickly (and without manual effort) on a new machine. This can be as simple as a shell script that calls ln -s for each file, or you could use a specialized utility . #be careful that the original dotfiles in home will be #overwritten, make backups before execute this file #!bin/bash link () { from = \" $1 \" to = \" $2 \" echo \"Linking ' $from ' to ' $to '\" rm -f \" $to \" ln -s $from $to } curPath = $( dirname $( readlink -f \" $0 \" )) echo $curPath ignore = 'install.sh' for file in $( ls $curPath ) ; do if [[ $file = $ignore ]] ; then continue fi src = $curPath '/' $file obj = $HOME '/.' $file link $src $obj done 4.Test your installation script on a fresh virtual machine. 5.Migrate all of your current tool configurations to your dotfiles repository. 6.Publish your dotfiles on GitHub. Remote Machines \u00b6 Install a Linux virtual machine (or use an already existing one) for this exercise. If you are not familiar with virtual machines check out this tutorial for installing one. 1.Go to ~/.ssh/ and check if you have a pair of SSH keys there. If not, generate them with ssh-keygen -o -a 100 -t ed25519 . It is recommended that you use a password and use ssh-agent , more info here . 2.Edit .ssh/config to have an entry as follows Host vm User username_goes_here HostName ip_goes_here IdentityFile ~/.ssh/id_ed25519 LocalForward 9999 localhost:8888 1.Use ssh-copy-id vm to copy your ssh key to the server. #copy the ssh key into ~/.ssh/authorized_keys 2.Start a webserver in your VM by executing python -m http.server 8888 . Access the VM webserver by navigating to http://localhost:9999 in your machine. 3.Edit your SSH server config by doing sudo vim /etc/ssh/sshd_config and disable password authentication by editing the value of PasswordAuthentication . Disable root login by editing the value of PermitRootLogin . Restart the ssh service with sudo service sshd restart . Try sshing in again. 4.(Challenge) Install mosh in the VM and establish a connection. Then disconnect the network adapter of the server/VM. Can mosh properly recover from it? 5.(Challenge) Look into what the -N and -f flags do in ssh and figure out what a command to achieve background port forwarding. #check the -L flag","title":"5.Command line Environment"},{"location":"course/missing_semester/5.Command-line%20Environment/#command-line-environment","text":"25 Feb 2021","title":"Command-line Environment"},{"location":"course/missing_semester/5.Command-line%20Environment/#exercises","text":"","title":"Exercises"},{"location":"course/missing_semester/5.Command-line%20Environment/#job-control","text":"1.From what we have seen, we can use some ps aux | grep commands to get our jobs\u2019 pids and then kill them, but there are better ways to do it. Start a sleep 10000 job in a terminal, background it with Ctrl-Z and continue its execution with bg . Now use pgrep to find its pid and pkill to kill it without ever typing the pid itself. (Hint: use the -af flags). pgrep -a sleep pkill -f 10000 ( # or pkill -f sleep) 2.Say you don\u2019t want to start a process until another completes, how you would go about it? In this exercise our limiting process will always be sleep 60 & . One way to achieve this is to use the wait command. Try launching the sleep command and having an ls wait until the background process finishes. #!/bin/bash sleep 10 & PID = $! wait $PID ls However, this strategy will fail if we start in a different bash session, since wait only works for child processes. One feature we did not discuss in the notes is that the kill command\u2019s exit status will be zero on success and nonzero otherwise. kill -0 does not send a signal but will give a nonzero exit status if the process does not exist. Write a bash function called pidwait that takes a pid and waits until the given process completes. You should use sleep to avoid wasting CPU unnecessarily. #!/bin/bash sleep 10 & while true do kill -0 $PID if [ $? -ne 0 ] ; then echo \"breaking!\" break fi sleep 1 done ls","title":"Job control"},{"location":"course/missing_semester/5.Command-line%20Environment/#terminal-multiplexer","text":"1.Follow this tmux tutorial and then learn how to do some basic customizations following these steps . #amazing","title":"Terminal multiplexer"},{"location":"course/missing_semester/5.Command-line%20Environment/#aliases","text":"1.Create an alias dc that resolves to cd for when you type it wrongly. alias dc = cd 2.Run history | awk '{$1=\"\";print substr($0,2)}' | sort | uniq -c | sort -n | tail -n 10 to get your top 10 most used commands and consider writing shorter aliases for them. Note: this works for Bash; if you\u2019re using ZSH, use history 1 instead of just history . # the top 10 of my used commands 5 ps 7 cd Desktop 10 vi ~/.spacevim 11 cd ~ 11 sh ./pidwait 12 vi input.txt 16 vi pidwait 17 vi .vimrc 25 vi ~/.vimrc -> v 47 ls","title":"Aliases"},{"location":"course/missing_semester/5.Command-line%20Environment/#dotfiles","text":"Let\u2019s get you up to speed with dotfiles. 1.Create a folder for your dotfiles and set up version control. 2.Add a configuration for at least one program, e.g. your shell, with some customization (to start off, it can be something as simple as customizing your shell prompt by setting $PS1 ). 3.Set up a method to install your dotfiles quickly (and without manual effort) on a new machine. This can be as simple as a shell script that calls ln -s for each file, or you could use a specialized utility . #be careful that the original dotfiles in home will be #overwritten, make backups before execute this file #!bin/bash link () { from = \" $1 \" to = \" $2 \" echo \"Linking ' $from ' to ' $to '\" rm -f \" $to \" ln -s $from $to } curPath = $( dirname $( readlink -f \" $0 \" )) echo $curPath ignore = 'install.sh' for file in $( ls $curPath ) ; do if [[ $file = $ignore ]] ; then continue fi src = $curPath '/' $file obj = $HOME '/.' $file link $src $obj done 4.Test your installation script on a fresh virtual machine. 5.Migrate all of your current tool configurations to your dotfiles repository. 6.Publish your dotfiles on GitHub.","title":"Dotfiles"},{"location":"course/missing_semester/5.Command-line%20Environment/#remote-machines","text":"Install a Linux virtual machine (or use an already existing one) for this exercise. If you are not familiar with virtual machines check out this tutorial for installing one. 1.Go to ~/.ssh/ and check if you have a pair of SSH keys there. If not, generate them with ssh-keygen -o -a 100 -t ed25519 . It is recommended that you use a password and use ssh-agent , more info here . 2.Edit .ssh/config to have an entry as follows Host vm User username_goes_here HostName ip_goes_here IdentityFile ~/.ssh/id_ed25519 LocalForward 9999 localhost:8888 1.Use ssh-copy-id vm to copy your ssh key to the server. #copy the ssh key into ~/.ssh/authorized_keys 2.Start a webserver in your VM by executing python -m http.server 8888 . Access the VM webserver by navigating to http://localhost:9999 in your machine. 3.Edit your SSH server config by doing sudo vim /etc/ssh/sshd_config and disable password authentication by editing the value of PasswordAuthentication . Disable root login by editing the value of PermitRootLogin . Restart the ssh service with sudo service sshd restart . Try sshing in again. 4.(Challenge) Install mosh in the VM and establish a connection. Then disconnect the network adapter of the server/VM. Can mosh properly recover from it? 5.(Challenge) Look into what the -N and -f flags do in ssh and figure out what a command to achieve background port forwarding. #check the -L flag","title":"Remote Machines"},{"location":"course/missing_semester/6.Version%20Control%20%28Git%29/","text":"Version Control (Git) \u00b6 4 March 2021 Exercises \u00b6 1.If you don\u2019t have any past experience with Git, either try reading the first couple chapters of Pro Git or go through a tutorial like Learn Git Branching . As you\u2019re working through it, relate Git commands to the data model. 2.Clone the repository for the class website . Explore the version history by visualizing it as a graph. git log --all --decorate --oneline --graph Who was the last person to modify README.md ? (Hint: use git log with an argument) #use flag --follow git log --follow README.md #by Anish Athalye What was the commit message associated with the last modification to the collections: line of _config.yml ? (Hint: use git blame and git show ) git blame _config.yml | tail -n1 | awk '{print \"git show \"$1 | \"sh\" }' #get the last associated commit 3.One common mistake when learning Git is to commit large files that should not be managed by Git or adding sensitive information. Try adding a file to a repository, making some commits and then deleting that file from history (you may want to look at this ). #use either the git filter-branch command or the BFG Repo-Cleaner open source tool. 4.Clone some repository from GitHub, and modify one of its existing files. What happens when you do git stash ? What do you see when running git log --all --oneline ? Run git stash pop to undo what you did with git stash . In what scenario might this be useful? #You can stash some staged files on one branch, after you switch to another branch the staging area will be empty, avoiding the mixture among staging areas of different branches. 5.Like many command line tools, Git provides a configuration file (or dotfile) called ~/.gitconfig . Create an alias in ~/.gitconfig so that when you run git graph , you get the output of git log --all --graph --decorate --oneline . #add this into ~/.gitconfig [ alias ] graph = log --all --graph --decorate --oneline 6.You can define global ignore patterns in ~/.gitignore_global after running git config --global core.excludesfile ~/.gitignore_global . Do this, and set up your global gitignore file to ignore OS-specific or editor-specific temporary files, like .DS_Store . 7.Fork the repository for the class website , find a typo or some other improvement you can make, and submit a pull request on GitHub.","title":"6.Version Control (Git)"},{"location":"course/missing_semester/6.Version%20Control%20%28Git%29/#version-control-git","text":"4 March 2021","title":"Version Control (Git)"},{"location":"course/missing_semester/6.Version%20Control%20%28Git%29/#exercises","text":"1.If you don\u2019t have any past experience with Git, either try reading the first couple chapters of Pro Git or go through a tutorial like Learn Git Branching . As you\u2019re working through it, relate Git commands to the data model. 2.Clone the repository for the class website . Explore the version history by visualizing it as a graph. git log --all --decorate --oneline --graph Who was the last person to modify README.md ? (Hint: use git log with an argument) #use flag --follow git log --follow README.md #by Anish Athalye What was the commit message associated with the last modification to the collections: line of _config.yml ? (Hint: use git blame and git show ) git blame _config.yml | tail -n1 | awk '{print \"git show \"$1 | \"sh\" }' #get the last associated commit 3.One common mistake when learning Git is to commit large files that should not be managed by Git or adding sensitive information. Try adding a file to a repository, making some commits and then deleting that file from history (you may want to look at this ). #use either the git filter-branch command or the BFG Repo-Cleaner open source tool. 4.Clone some repository from GitHub, and modify one of its existing files. What happens when you do git stash ? What do you see when running git log --all --oneline ? Run git stash pop to undo what you did with git stash . In what scenario might this be useful? #You can stash some staged files on one branch, after you switch to another branch the staging area will be empty, avoiding the mixture among staging areas of different branches. 5.Like many command line tools, Git provides a configuration file (or dotfile) called ~/.gitconfig . Create an alias in ~/.gitconfig so that when you run git graph , you get the output of git log --all --graph --decorate --oneline . #add this into ~/.gitconfig [ alias ] graph = log --all --graph --decorate --oneline 6.You can define global ignore patterns in ~/.gitignore_global after running git config --global core.excludesfile ~/.gitignore_global . Do this, and set up your global gitignore file to ignore OS-specific or editor-specific temporary files, like .DS_Store . 7.Fork the repository for the class website , find a typo or some other improvement you can make, and submit a pull request on GitHub.","title":"Exercises"},{"location":"course/missing_semester/7.Debugging%20and%20Profiling/","text":"Debugging and Profiling \u00b6 5 March 2021 Exercises \u00b6 Debugging \u00b6 1.Use journalctl on Linux or log show on macOS to get the super user accesses and commands in the last day. If there aren\u2019t any you can execute some harmless commands such as sudo ls and check again. journalctl --since = \"1d ago\" | grep 2.Do this hands on pdb tutorial to familiarize yourself with the commands. For a more in depth tutorial read this . 3.Install shellcheck and try checking the following script. What is wrong with the code? Fix it. Install a linter plugin in your editor so you can get your warnings automatically. ##### example code: #!/bin/sh ## Example: a typical script with several problems for f in $( ls *.m3u ) do grep -qi hq.*mp3 $f \\ && echo -e 'Playlist $f contains a HQ file in mp3 format' done #!/bin/bash ## Example: a typical script with several problems for f in ./*.m3u ; do grep -qi \"hq.*mp3\" \" $f \" \\ && echo -e \"Playlist $f contains a HQ file in mp3 format\" done 4.(Advanced) Read about reversible debugging and get a simple example working using rr or RevPDB . Profiling \u00b6 1. Here are some sorting algorithm implementations. Use cProfile and line_profiler to compare the runtime of insertion sort and quicksort. What is the bottleneck of each algorithm? Use then memory_profiler to check the memory consumption, why is insertion sort better? Check now the inplace version of quicksort. Challenge: Use perf to look at the cycle counts and cache hits and misses of each algorithm. #if kernprof cannot be found after installing line_profiler, the corresponding executable is probably be in ~/.local/bin/. 2.Here\u2019s some (arguably convoluted) Python code for computing Fibonacci numbers using a function for each number. #!/usr/bin/env python def fib0 (): return 0 def fib1 (): return 1 s = \"\"\"def fib {} (): return fib {} () + fib {} ()\"\"\" if __name__ == '__main__' : for n in range ( 2 , 10 ): exec ( s . format ( n , n - 1 , n - 2 )) # from functools import lru_cache # for n in range(10): # exec(\"fib{} = lru_cache(1)(fib{})\".format(n, n)) print ( eval ( \"fib9()\" )) Put the code into a file and make it executable. Install prerequisites: pycallgraph and graphviz . (If you can run dot , you already have GraphViz.) Run the code as is with pycallgraph graphviz -- ./fib.py and check the pycallgraph.png file. How many times is fib0 called?. We can do better than that by memoizing the functions. Uncomment the commented lines and regenerate the images. How many times are we calling each fibN function now? 3.A common issue is that a port you want to listen on is already taken by another process. Let\u2019s learn how to discover that process pid. First execute python -m http.server 4444 to start a minimal web server listening on port 4444 . On a separate terminal run lsof | grep LISTEN to print all listening processes and ports. Find that process pid and terminate it by running kill <PID> . 4.Limiting processes resources can be another handy tool in your toolbox. Try running stress -c 3 and visualize the CPU consumption with htop . Now, execute taskset --cpu-list 0,2 stress -c 3 and visualize it. Is stress taking three CPUs? Why not? Read man taskset . Challenge: achieve the same using cgroups . Try limiting the memory consumption of stress -m . 5.(Advanced) The command curl ipinfo.io performs a HTTP request and fetches information about your public IP. Open Wireshark and try to sniff the request and reply packets that curl sent and received. (Hint: Use the http filter to just watch HTTP packets).","title":"7.Debugging and Profiling"},{"location":"course/missing_semester/7.Debugging%20and%20Profiling/#debugging-and-profiling","text":"5 March 2021","title":"Debugging and Profiling"},{"location":"course/missing_semester/7.Debugging%20and%20Profiling/#exercises","text":"","title":"Exercises"},{"location":"course/missing_semester/7.Debugging%20and%20Profiling/#debugging","text":"1.Use journalctl on Linux or log show on macOS to get the super user accesses and commands in the last day. If there aren\u2019t any you can execute some harmless commands such as sudo ls and check again. journalctl --since = \"1d ago\" | grep 2.Do this hands on pdb tutorial to familiarize yourself with the commands. For a more in depth tutorial read this . 3.Install shellcheck and try checking the following script. What is wrong with the code? Fix it. Install a linter plugin in your editor so you can get your warnings automatically. ##### example code: #!/bin/sh ## Example: a typical script with several problems for f in $( ls *.m3u ) do grep -qi hq.*mp3 $f \\ && echo -e 'Playlist $f contains a HQ file in mp3 format' done #!/bin/bash ## Example: a typical script with several problems for f in ./*.m3u ; do grep -qi \"hq.*mp3\" \" $f \" \\ && echo -e \"Playlist $f contains a HQ file in mp3 format\" done 4.(Advanced) Read about reversible debugging and get a simple example working using rr or RevPDB .","title":"Debugging"},{"location":"course/missing_semester/7.Debugging%20and%20Profiling/#profiling","text":"1. Here are some sorting algorithm implementations. Use cProfile and line_profiler to compare the runtime of insertion sort and quicksort. What is the bottleneck of each algorithm? Use then memory_profiler to check the memory consumption, why is insertion sort better? Check now the inplace version of quicksort. Challenge: Use perf to look at the cycle counts and cache hits and misses of each algorithm. #if kernprof cannot be found after installing line_profiler, the corresponding executable is probably be in ~/.local/bin/. 2.Here\u2019s some (arguably convoluted) Python code for computing Fibonacci numbers using a function for each number. #!/usr/bin/env python def fib0 (): return 0 def fib1 (): return 1 s = \"\"\"def fib {} (): return fib {} () + fib {} ()\"\"\" if __name__ == '__main__' : for n in range ( 2 , 10 ): exec ( s . format ( n , n - 1 , n - 2 )) # from functools import lru_cache # for n in range(10): # exec(\"fib{} = lru_cache(1)(fib{})\".format(n, n)) print ( eval ( \"fib9()\" )) Put the code into a file and make it executable. Install prerequisites: pycallgraph and graphviz . (If you can run dot , you already have GraphViz.) Run the code as is with pycallgraph graphviz -- ./fib.py and check the pycallgraph.png file. How many times is fib0 called?. We can do better than that by memoizing the functions. Uncomment the commented lines and regenerate the images. How many times are we calling each fibN function now? 3.A common issue is that a port you want to listen on is already taken by another process. Let\u2019s learn how to discover that process pid. First execute python -m http.server 4444 to start a minimal web server listening on port 4444 . On a separate terminal run lsof | grep LISTEN to print all listening processes and ports. Find that process pid and terminate it by running kill <PID> . 4.Limiting processes resources can be another handy tool in your toolbox. Try running stress -c 3 and visualize the CPU consumption with htop . Now, execute taskset --cpu-list 0,2 stress -c 3 and visualize it. Is stress taking three CPUs? Why not? Read man taskset . Challenge: achieve the same using cgroups . Try limiting the memory consumption of stress -m . 5.(Advanced) The command curl ipinfo.io performs a HTTP request and fetches information about your public IP. Open Wireshark and try to sniff the request and reply packets that curl sent and received. (Hint: Use the http filter to just watch HTTP packets).","title":"Profiling"},{"location":"course/missing_semester/8.Metaprogramming/","text":"Metaprogramming \u00b6 23 March 2021 Exercises \u00b6 1.Most makefiles provide a target called clean . This isn\u2019t intended to produce a file called clean , but instead to clean up any files that can be re-built by make. Think of it as a way to \u201cundo\u201d all of the build steps. Implement a clean target for the paper.pdf Makefile above. You will have to make the target phony . You may find the git ls-files subcommand useful. A number of other very common make targets are listed here . 2.Take a look at the various ways to specify version requirements for dependencies in Rust\u2019s build system . Most package repositories support similar syntax. For each one (caret, tilde, wildcard, comparison, and multiple), try to come up with a use-case in which that particular kind of requirement makes sense. 3. Git can act as a simple CI system all by itself. In .git/hooks inside any git repository, you will find (currently inactive) files that are run as scripts when a particular action happens. Write a pre-commit hook that runs make paper.pdf and refuses the commit if the make command fails. This should prevent any commit from having an unbuildable version of the paper. 4.Set up a simple auto-published page using GitHub Pages . Add a GitHub Action to the repository to run shellcheck on any shell files in that repository (here is one way to do it ). Check that it works! 5. Build your own GitHub action to run proselint or write-good on all the .md files in the repository. Enable it in your repository, and check that it works by filing a pull request with a typo in it.","title":"8.Metaprogramming"},{"location":"course/missing_semester/8.Metaprogramming/#metaprogramming","text":"23 March 2021","title":"Metaprogramming"},{"location":"course/missing_semester/8.Metaprogramming/#exercises","text":"1.Most makefiles provide a target called clean . This isn\u2019t intended to produce a file called clean , but instead to clean up any files that can be re-built by make. Think of it as a way to \u201cundo\u201d all of the build steps. Implement a clean target for the paper.pdf Makefile above. You will have to make the target phony . You may find the git ls-files subcommand useful. A number of other very common make targets are listed here . 2.Take a look at the various ways to specify version requirements for dependencies in Rust\u2019s build system . Most package repositories support similar syntax. For each one (caret, tilde, wildcard, comparison, and multiple), try to come up with a use-case in which that particular kind of requirement makes sense. 3. Git can act as a simple CI system all by itself. In .git/hooks inside any git repository, you will find (currently inactive) files that are run as scripts when a particular action happens. Write a pre-commit hook that runs make paper.pdf and refuses the commit if the make command fails. This should prevent any commit from having an unbuildable version of the paper. 4.Set up a simple auto-published page using GitHub Pages . Add a GitHub Action to the repository to run shellcheck on any shell files in that repository (here is one way to do it ). Check that it works! 5. Build your own GitHub action to run proselint or write-good on all the .md files in the repository. Enable it in your repository, and check that it works by filing a pull request with a typo in it.","title":"Exercises"},{"location":"course/missing_semester/9.Security%20and%20Cryptography/","text":"Security and Cryptography \u00b6 26 March 2021 Exercises \u00b6 1.Entropy. 1. Suppose a password is chosen as a concatenation of four lower-case dictionary words, where each word is selected uniformly at random from a dictionary of size 100,000. An example of such a password is correcthorsebatterystaple . How many bits of entropy does this have? 2. Consider an alternative scheme where a password is chosen as a sequence of 8 random alphanumeric characters (including both lower-case and upper-case letters). An example is rg8Ql34g . How many bits of entropy does this have? 3. Which is the stronger password? 4. Suppose an attacker can try guessing 10,000 passwords per second. On average, how long will it take to break each of the passwords? 2. Cryptographic hash functions. Download a Debian image from a mirror (e.g. from this Argentinean mirror . Cross-check the hash (e.g. using the sha256sum command) with the hash retrieved from the official Debian site (e.g. this file hosted at debian.org , if you\u2019ve downloaded the linked file from the Argentinean mirror). 3. Symmetric cryptography. Encrypt a file with AES encryption, using OpenSSL : openssl aes-256-cbc -salt -in {input filename} -out {output filename} . Look at the contents using cat or hexdump . Decrypt it with openssl aes-256-cbc -d -in {input filename} -out {output filename} and confirm that the contents match the original using cmp . 4.Asymmetric cryptography. 1. Set up SSH keys on a computer you have access to (not Athena, because Kerberos interacts weirdly with SSH keys). Rather than using RSA keys as in the linked tutorial, use more secure ED25519 keys . Make sure your private key is encrypted with a passphrase, so it is protected at rest. 2. Set up GPG 3. Send Anish an encrypted email ( public key ). 4. Sign a Git commit with git commit -S or create a signed Git tag with git tag -s . Verify the signature on the commit with git show --show-signature or on the tag with git tag -v .","title":"9.Security and Cryptography"},{"location":"course/missing_semester/9.Security%20and%20Cryptography/#security-and-cryptography","text":"26 March 2021","title":"Security and Cryptography"},{"location":"course/missing_semester/9.Security%20and%20Cryptography/#exercises","text":"1.Entropy. 1. Suppose a password is chosen as a concatenation of four lower-case dictionary words, where each word is selected uniformly at random from a dictionary of size 100,000. An example of such a password is correcthorsebatterystaple . How many bits of entropy does this have? 2. Consider an alternative scheme where a password is chosen as a sequence of 8 random alphanumeric characters (including both lower-case and upper-case letters). An example is rg8Ql34g . How many bits of entropy does this have? 3. Which is the stronger password? 4. Suppose an attacker can try guessing 10,000 passwords per second. On average, how long will it take to break each of the passwords? 2. Cryptographic hash functions. Download a Debian image from a mirror (e.g. from this Argentinean mirror . Cross-check the hash (e.g. using the sha256sum command) with the hash retrieved from the official Debian site (e.g. this file hosted at debian.org , if you\u2019ve downloaded the linked file from the Argentinean mirror). 3. Symmetric cryptography. Encrypt a file with AES encryption, using OpenSSL : openssl aes-256-cbc -salt -in {input filename} -out {output filename} . Look at the contents using cat or hexdump . Decrypt it with openssl aes-256-cbc -d -in {input filename} -out {output filename} and confirm that the contents match the original using cmp . 4.Asymmetric cryptography. 1. Set up SSH keys on a computer you have access to (not Athena, because Kerberos interacts weirdly with SSH keys). Rather than using RSA keys as in the linked tutorial, use more secure ED25519 keys . Make sure your private key is encrypted with a passphrase, so it is protected at rest. 2. Set up GPG 3. Send Anish an encrypted email ( public key ). 4. Sign a Git commit with git commit -S or create a signed Git tag with git tag -s . Verify the signature on the commit with git show --show-signature or on the tag with git tag -v .","title":"Exercises"},{"location":"course/missing_semester/Overview/","text":"Overview \u00b6 \u8bfe\u7a0b\u7b80\u4ecb\uff1amissing semester \u662fMIT\u8bbe\u7acb\u7684\u4e00\u95e8\u8bfe\u7a0b\uff0c\u4ece\u5b9e\u8df5\u51fa\u53d1\uff0c\u6559\u6388\u5b66\u751f\u5e73\u65f6\u5728\u8bfe\u5802\u4e2d\u5b66\u4e0d\u5230\u7684\u4f46\u662f\u5374\u6bd4\u8f83\u91cd\u8981\u7684\u4e3b\u9898\uff08\u5982\u547d\u4ee4\u884c\u3001git\u7b49\uff09 \u8bfe\u7a0b\u5730\u5740\uff1ahttps://missing.csail.mit.edu/ \u539f\u89c6\u9891\u5730\u5740\uff1ahttps://bit.ly/2OuWuh4 \u642c\u8fd0\u89c6\u9891\u5730\u5740\uff1ahttps://www.bilibili.com/video/BV1x7411H7wa Course overview+the shell Shell Tools and Scripting Editors (Vim) Data Wrangling Command-line Environment Version Control (Git) Debugging and Profiling Metaprogramming Security and Cryptography \u4ee5\u4e0a\u662f\u535a\u4e3b\u505a\u7684\u8bfe\u7a0b\u914d\u5957\u7ec3\u4e60\uff0c\u7b54\u6848\u4ec5\u4f9b\u53c2\u8003\uff1b\u5982\u6709\u9519\u8bef\u6216\u758f\u6f0f\uff0c\u8fd8\u671b\u62e8\u5197\u6307\u6b63\uff0c\u8c22\u8c22\uff01","title":"Missing Semester"},{"location":"course/missing_semester/Overview/#overview","text":"\u8bfe\u7a0b\u7b80\u4ecb\uff1amissing semester \u662fMIT\u8bbe\u7acb\u7684\u4e00\u95e8\u8bfe\u7a0b\uff0c\u4ece\u5b9e\u8df5\u51fa\u53d1\uff0c\u6559\u6388\u5b66\u751f\u5e73\u65f6\u5728\u8bfe\u5802\u4e2d\u5b66\u4e0d\u5230\u7684\u4f46\u662f\u5374\u6bd4\u8f83\u91cd\u8981\u7684\u4e3b\u9898\uff08\u5982\u547d\u4ee4\u884c\u3001git\u7b49\uff09 \u8bfe\u7a0b\u5730\u5740\uff1ahttps://missing.csail.mit.edu/ \u539f\u89c6\u9891\u5730\u5740\uff1ahttps://bit.ly/2OuWuh4 \u642c\u8fd0\u89c6\u9891\u5730\u5740\uff1ahttps://www.bilibili.com/video/BV1x7411H7wa Course overview+the shell Shell Tools and Scripting Editors (Vim) Data Wrangling Command-line Environment Version Control (Git) Debugging and Profiling Metaprogramming Security and Cryptography \u4ee5\u4e0a\u662f\u535a\u4e3b\u505a\u7684\u8bfe\u7a0b\u914d\u5957\u7ec3\u4e60\uff0c\u7b54\u6848\u4ec5\u4f9b\u53c2\u8003\uff1b\u5982\u6709\u9519\u8bef\u6216\u758f\u6f0f\uff0c\u8fd8\u671b\u62e8\u5197\u6307\u6b63\uff0c\u8c22\u8c22\uff01","title":"Overview"}]}